schema {
  query: Query
  mutation: Mutation
}

type Query {
  getMyProfile(patientId: String): MyProfile!
  getPatient(patientId: String): Patient! # probably we will need separate method for getting full patient info (appointments, followups etc.)
  getPatients(limit: Int!, nextToken: String): PatientPage!
  getNotes(patientId: String!): NotesPage!
  getPresignedUrl(fileName: String!, fileType: String!): String!
}

type Mutation {
  # archivePatient(patientId: String!): Patient!  # to flags
  deletePatient(patientId: String!): Patient!  # Do we need this?  What happens to the record of the patients notes/appointments?
  #changeContactedFlag --> will be probably generalized to setFlag
  #markAsNotifiedAboutFillMedBackground --> will be probably generalized to setFlag
  #markAsNotifiedAboutUpcomingFollowUp --> move to follow up service
  #markAsPinned --> will be probably generalized to setFlag
  #markLastTreatmentPlanAsRead --> to followup service + ElasticSearch
  #reassignEmployees --> implement setCareTeam handler
  #TODO: create a plan in lucid chart for how we will handle the different types of action items and flags
  setFlag(patientId: String, flag: String, value: Boolean): Patient!   
  # createPatientActionItem(patientId: String, actionItems: [String]!): Patient!  
  setMeetingLink(meetingLink: String): Nothing
  #updateChatInitTime --> need to think what to do with it
  #updateChatTime --> need to think what to do with it
  updateInsuranceInfo(patientId: String, insuranceInfo: PatientInsuranceInfoInput): Patient!
  updateMedicalBackgroundInfo(
    patientId: String
    medicalBackgroundInfo: PatientMedicalBackgroundInput
  ): Patient!
  updatePatientName(patientId: String!, fullName: String!): Patient!
  updatePatientEmail(patientId: String!, email: String!): Patient!
  updatePatientDateOfBirth(patientId: String!, dateOfBirth: String!): Patient!
  updatePatientPhone(patientId: String!, phone: String!): Patient!
  updatePatientHeight(patientId: String!, height: Int!): Patient!
  updatePatientWeight(patientId: String!, weight: Int!): Patient!
  updatePatientParentInfo(patientId: String!, parentInfo: ParentInfoInput!): Patient!
  updatePatientShippingInfo(patientId: String!, shippingInfo: ShippingInfoInput!): Patient!
  updatePatientSex(patientId: String!, sex: String!): Patient!
  #updateMembershipNotificationStatus --> move to setFlag as number
  #updateNoShowStatus --> move to appointment service
  #updateUpcomingAppointmentNotificationStatus - move to appointment service
}

input ShippingInfoInput {
  addressLine1: String!
  addressLine2: String
  state: String!
  city: String!
  zipCode: String!
}

input ParentInfoInput {
  name: String!
  email: String!
  phone: String!
}

type Nothing {
  nothing: ID
}

type Patient {
  patientId: ID!
  accountId: ID!
  email: String!
  state: String!
  fullName: String!
  dateOfBirth: String!
  phone: String
  careTeam: [PatientCareTeam]
  parentInfo: PatientParentInfo
  medicalBackground: PatientMedicalBackground
  shippingInfo: ShippingInfo
  insurance: PatientInsuranceInfo
  timezone: String
  scheduleLink: String
  flags:
  # flags(contains flags for different purposes)
}

type PatientCareTeam {
  id: String
  role: String
}

type PatientInsuranceInfo {
  insuranceName: String
  policyHolderName: String
  groupNumber: String
  memberId: String
}

type NoteInput {
  creatorId: ID!
  creatorRole: String!
  text: String!
  type: String!
  patientId: ID!
}

type PatientMedicalBackground {
  sex: String
  height: Int
  weight: Int
  skinSurvey: [PatientMedicalBackgroundSkinSurvey!]
}

type PatientMedicalBackgroundSkinSurvey {
  id: String!
  answer: String!
}

type ShippingInfo {
  city: String!
  state: String!
  zipCode: String!
  addressLine1: String!
  addressLine2: String
}

type PatientParentInfo {
  email: String!
  phone: String!
  name: String!
}

type PatientsPage {
  patients: [Patient!]
  nextToken: String
}

type NotesPage {
  notes: [Note!]
  nextToken: String
}

# TODO update note type
type Note {
  noteId: ID! #HASH,
  creatorId: ID! 
  creatorRole: String,
  createdAt: AWSDateTime!,
  updatedAt: AWSDateTime!,
  lastModifiedBy: ID!,
  text: String!,
  type: String,
  patientId: ID!
}
